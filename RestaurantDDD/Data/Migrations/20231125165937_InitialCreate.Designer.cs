// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantConsole.Data;

#nullable disable

namespace RestaurantConsole.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20231125165937_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantConsole.Aggregate.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfCardId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfPayId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfCardId");

                    b.HasIndex("TypeOfPayId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusOfOrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusOfOrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detaills")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.StatusOfOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusOfOrders");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.TypeOfCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOfCard");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.TypeOfPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOfPay");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Client", b =>
                {
                    b.HasOne("RestaurantConsole.Aggregate.TypeOfCard", "TypeOfCard")
                        .WithMany("Clients")
                        .HasForeignKey("TypeOfCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantConsole.Aggregate.TypeOfPay", "TypeOfPay")
                        .WithMany("Clients")
                        .HasForeignKey("TypeOfPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfCard");

                    b.Navigation("TypeOfPay");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Order", b =>
                {
                    b.HasOne("RestaurantConsole.Aggregate.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantConsole.Aggregate.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantConsole.Aggregate.StatusOfOrder", "StatusOfOrder")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOfOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("StatusOfOrder");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.OrderProduct", b =>
                {
                    b.HasOne("RestaurantConsole.Aggregate.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantConsole.Aggregate.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.StatusOfOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.TypeOfCard", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("RestaurantConsole.Aggregate.TypeOfPay", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
